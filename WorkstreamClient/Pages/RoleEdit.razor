@page "/role/edit/{RoleId:int}"
@using WorkstreamClient.DTO
@using WorkstreamClient.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject ILogger<RoleEdit> Logger

    <style>
    /* Main layout styles */
    :root {
        --primary-color: #3498db;
        --primary-hover: #2980b9;
        --error-color: #e74c3c;
        --text-color: #333333;
        --border-color: #dddddd;
        --background-light: #f8f9fa;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
        background-color: #f5f7fa;
        line-height: 1.6;
    }

    h3 {
        color: #2c3e50;
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid var(--primary-color);
        font-weight: 600;
    }

    /* Form styles */
    form {
        background-color: white;
        border-radius: 8px;
        box-shadow: var(--shadow);
        padding: 2rem;
        max-width: 600px;
        margin: 0 auto;
    }

    .input-group {
        margin-bottom: 1.5rem;
    }

        .input-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2c3e50;
        }

    .input-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-size: 1rem;
        transition: all 0.2s ease;
    }

        .input-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.25);
        }

    /* Checkbox styles */
    .permission-checks {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 0.75rem;
        background-color: var(--background-light);
        padding: 1rem;
        border-radius: 4px;
        border: 1px solid var(--border-color);
    }

    .checkbox-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

        .checkbox-item input[type="checkbox"] {
            margin-right: 0.5rem;
            width: 18px;
            height: 18px;
            accent-color: var(--primary-color);
            cursor: pointer;
        }

        .checkbox-item label {
            margin-bottom: 0;
            cursor: pointer;
            font-size: 0.95rem;
        }

    /* Validation styles */
    .validation-message {
        color: var(--error-color);
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .validation-summary {
        background-color: #fdedec;
        border-left: 4px solid var(--error-color);
        padding: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 4px;
    }

    /* Button styles */
    .action-btn {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .create-btn {
        background-color: var(--primary-color);
        color: white;
    }

        .create-btn:hover {
            background-color: var(--primary-hover);
        }


    }
    </style>

<h3>Edit Role</h3>

<EditForm Model="@roleToEdit" OnValidSubmit="UpdateRole">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group">
        <label for="roleName">Role Name:</label>
        <InputText id="roleName" class="input-control" @bind-Value="roleToEdit.Name" />
    </div>

    <div class="input-group">
        <label>Permissions:</label>
        <div class="permission-checks">
            @foreach (var permission in permissions)
            {
                <div class="checkbox-item">
                    <InputCheckbox id="@permission.Name" @bind-Value="permission.IsSelected" />
                    <label for="@permission.Name">@permission.Name</label>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="action-btn create-btn">Update Role</button>
</EditForm>

@code {
    [Parameter] public int RoleId { get; set; }
    private RoleWriteDTO roleToEdit = new RoleWriteDTO();
    private IEnumerable<PermissionReadDTO> permissions = new List<PermissionReadDTO>();

    protected override async Task OnInitializedAsync()
    {
        if (RoleId == 0)
        {
            // Handle invalid RoleId
            Navigation.NavigateTo("/usermanagement");
            return;
        }

        try
        {
            // Fetch role data
            var roleReadDto = await UserService.GetRoleByIdAsync(RoleId);

            // Map the data
            roleToEdit = new RoleWriteDTO
                {
                    Name = roleReadDto.Name,
                    PermissionNames = roleReadDto.PermissionNames.ToList() // List of permissions that role already has
                };

            // Fetch available permissions
            permissions = await UserService.GetAllPermissionsAsync();

            // Set IsSelected for each permission based on whether the role already has it
            foreach (var permission in permissions)
            {
                // Mark as selected if the role has this permission
                permission.IsSelected = roleToEdit.PermissionNames.Contains(permission.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading role data.");
        }
    }

    private async Task UpdateRole()
    {
        try
        {
            // Update the PermissionNames list based on the selected permissions
            roleToEdit.PermissionNames = permissions
                .Where(p => p.IsSelected)  // Only select permissions that are checked
                .Select(p => p.Name)       // Map the permissions to their names
                .ToList();                 // Create the list of selected permissions

            // Print the role data being sent
            Console.WriteLine("Sending the following data to update the role:");
            Console.WriteLine($"Role Name: {roleToEdit.Name}");
            Console.WriteLine("Permissions:");
            foreach (var permission in roleToEdit.PermissionNames)
            {
                Console.WriteLine($"- {permission}");
            }

            // Optionally, log this information using ILogger (in production, use Logger)
            Logger.LogInformation("Sending the following data to update the role:");
            Logger.LogInformation($"Role Name: {roleToEdit.Name}");
            foreach (var permission in roleToEdit.PermissionNames)
            {
                Logger.LogInformation($"- {permission}");
            }

            // Update the role
            await UserService.UpdateRoleAsync(RoleId, roleToEdit);

            // Redirect after update
            Navigation.NavigateTo("/usermanagement");
        }
        catch (Exception ex)
        {
            // Handle error
            Logger.LogError(ex, "Error updating role.");
        }
    }
}
