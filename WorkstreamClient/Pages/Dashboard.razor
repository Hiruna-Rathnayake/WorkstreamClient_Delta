@page "/Dashboard"
@layout MainLayout
@using WorkstreamClient.DTO
@using WorkstreamClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject OrderService OrderService
@inject InventoryService InventoryService
@inject CustomerService CustomerService
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime


<HeadContent>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="css/mainlayout.css" rel="stylesheet" />

    <style>
        .loading-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 300px;
        }

        .redirect-container {
            text-align: center;
            padding: 2rem;
        }
    </style>

    <style>
        /* Dashboard Container */
        .dashboard-container {
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Summary Cards Styles */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            display: flex;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            }

        .card-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border-radius: 12px;
            margin-right: 15px;
            font-size: 24px;
            color: white;
        }

        .customers-icon {
            background-color: #3a86ff;
        }

        .orders-icon {
            background-color: #7209b7;
        }

        .value-icon {
            background-color: #38b000;
        }

        .inventory-icon {
            background-color: #f72585;
        }

        .card-data {
            flex: 1;
        }

            .card-data h3 {
                margin: 0 0 5px 0;
                font-size: 16px;
                color: #6c757d;
            }

            .card-data .number {
                margin: 0;
                font-size: 24px;
                font-weight: bold;
                color: #212529;
            }

            .card-data .detail {
                margin: 5px 0 0 0;
                font-size: 13px;
                color: #6c757d;
            }

        /* Data Panels Styles */
        .data-panels {
            display: grid;
            grid-template-columns: 1fr;
            gap: 30px;
        }


        .panel {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f1f1f1;
        }

            .panel-header h2 {
                margin: 0;
                font-size: 18px;
                font-weight: 600;
                color: #212529;
            }

        .view-all-btn {
            background-color: transparent;
            border: none;
            color: #4361ee;
            font-size: 14px;
            cursor: pointer;
        }

            .view-all-btn:hover {
                text-decoration: underline;
            }

        .panel-content {
            padding: 0;
            overflow-x: auto;
        }

        /* Table Styles */
        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

            .data-table th {
                text-align: left;
                padding: 12px 20px;
                font-size: 14px;
                font-weight: 600;
                color: #495057;
                background-color: #f8f9fa;
            }

            .data-table td {
                padding: 12px 20px;
                font-size: 14px;
                color: #212529;
                border-top: 1px solid #f1f1f1;
            }

            .data-table tbody tr:hover {
                background-color: #f8f9fa;
            }

        /* Status Indicators */
        .status-paid, .status-delivered, .status-normal {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-pending, .status-processing {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-out {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            background-color: #fee2e2;
            color: #b91c1c;
        }

        .status-low {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            background-color: #fef3c7;
            color: #92400e;
        }

        /* Loading Indicator */
        .loading-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 30px;
            color: #6c757d;
        }

        /* Empty State */
        .empty-state {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 30px;
            color: #6c757d;
            font-style: italic;
        }
    </style>


</HeadContent>

@code {
    private List<InventoryItemReadDTO> inventoryItems = new List<InventoryItemReadDTO>();
    private List<OrderReadDTO> allOrders = new List<OrderReadDTO>();
    private List<CustomerReadDTO> customers = new List<CustomerReadDTO>();
    private bool isLoading = true;
    private string errorMessage = null;
    private bool isAuthenticated = false;
    private bool isCheckingAuth = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthentication();
            StateHasChanged();
        }
    }


    private async Task CheckAuthentication()
    {
        try
        {
            isCheckingAuth = true;

            // Get auth state from provider
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // If the user is not authenticated, check the service
            if (user.Identity?.IsAuthenticated != true)
            {
                var isUserAuthenticated = await AuthService.IsAuthenticatedAsync();
                if (!isUserAuthenticated)
                {
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    return;
                }
            }

            // Validate the token
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token) || AuthService.IsTokenExpired(token))
            {
                await AuthService.Logout();
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            isAuthenticated = true;  // User is authenticated, load the data
            await LoadDashboardData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check error: {ex.Message}");
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        finally
        {
            isCheckingAuth = false;
        }
    }


    private async Task LoadDashboardData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Start all three requests in parallel
            var inventoryTask = LoadInventoryData();
            var ordersTask = LoadOrdersData();
            var customersTask = LoadCustomersData();

            // Wait for all tasks to complete
            await Task.WhenAll(inventoryTask, ordersTask, customersTask);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadInventoryData()
    {
        try
        {
            inventoryItems = await InventoryService.GetAllInventoryItemsAsync();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.Contains("403"))
            {
                throw new UnauthorizedAccessException("You don't have permission to view inventory data.");
            }
            throw;
        }
    }

    private async Task LoadOrdersData()
    {
        try
        {
            allOrders = await OrderService.GetAllOrdersAsync();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.Contains("403"))
            {
                throw new UnauthorizedAccessException("You don't have permission to view order data.");
            }
            throw;
        }
    }

    private async Task LoadCustomersData()
    {
        try
        {
            customers = await CustomerService.GetAllCustomersAsync();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.Contains("403"))
            {
                throw new UnauthorizedAccessException("You don't have permission to view customer data.");
            }
            throw;
        }
    }

    private void HandleException(Exception ex)
    {
        if (ex is UnauthorizedAccessException)
        {
            errorMessage = ex.Message;
        }
        else if (ex.Message.Contains("401"))
        {
            // Token expired or invalid
            _ = AuthService.Logout();
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        else if (ex.Message.Contains("403"))
        {
            errorMessage = "You don't have permission to view some dashboard data.";
        }
        else
        {
            errorMessage = "An error occurred while loading dashboard data. Please try again later.";
            Console.WriteLine($"Dashboard error: {ex.Message}");
        }
    }

    private decimal CalculateTotalOrderValue()
    {
        decimal total = 0;

        foreach (var order in allOrders)
        {
            if (order.OrderItems != null)
            {
                total += order.OrderItems.Sum(item => item.Quantity * item.Price);
            }
        }

        return total;
    }

    private void NavigateToOrdersPage()
    {
        NavigationManager.NavigateTo("/orders");
    }

    private void NavigateToInventoryPage()
    {
        NavigationManager.NavigateTo("/inventory");
    }
}

@if (isCheckingAuth)
{
    <div class="loading-container">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Verifying authentication...</span>
        </div>
        <p>Verifying authentication...</p>
    </div>
}
else if (!isAuthenticated)
{
    <div class="redirect-container">
        <p>Not authenticated. Redirecting to login...</p>
    </div>
}
else
{
    <div class="dashboard-container">
        @if (errorMessage != null)
        {
            <div class="alert alert-danger">
                <strong>Error:</strong> @errorMessage
                <button type="button" class="close" @onclick="() => errorMessage = null">
                    <span>&times;</span>
                </button>
            </div>
        }

        <!-- Summary Cards Section -->
        <div class="summary-cards">
            <div class="card">
                <div class="card-icon customers-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="card-data">
                    <h3>Total Customers</h3>
                    <p class="number">@(customers.Count)</p>
                    <p class="detail">Active accounts</p>
                </div>
            </div>

            <div class="card">
                <div class="card-icon orders-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="card-data">
                    <h3>Total Orders</h3>
                    <p class="number">@(allOrders.Count)</p>
                    <p class="detail">Processed orders</p>
                </div>
            </div>

            <div class="card">
                <div class="card-icon value-icon">
                    <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="card-data">
                    <h3>Order Value</h3>
                    <p class="number">$@(CalculateTotalOrderValue().ToString("N2"))</p>
                    <p class="detail">Total sales</p>
                </div>
            </div>

            <div class="card">
                <div class="card-icon inventory-icon">
                    <i class="fas fa-boxes"></i>
                </div>
                <div class="card-data">
                    <h3>Inventory Items</h3>
                    <p class="number">@(inventoryItems.Count)</p>
                    <p class="detail">Products in stock</p>
                </div>
            </div>
        </div>

        <!-- Data Panels Section -->
        <div class="data-panels">
            <div class="panel">
                <div class="panel-header">
                    <h2>Recent Orders</h2>
                    <button class="view-all-btn" @onclick="NavigateToOrdersPage">View All</button>
                </div>
                <div class="panel-content">
                    @if (isLoading)
                    {
                        <div class="loading-indicator">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <span class="ml-2">Loading orders...</span>
                        </div>
                    }
                    else if (allOrders.Count == 0)
                    {
                        <div class="empty-state">
                            <p>No orders found.</p>
                        </div>
                    }
                    else
                    {
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in allOrders.OrderByDescending(o => o.OrderDate).Take(5))
                                {
                                    var customer = customers.FirstOrDefault(c => c.CustomerId == order.CustomerId);
                                    <tr>
                                        <td>#@order.OrderId</td>
                                        <td>@(customer?.Name ?? $"Customer {order.CustomerId}")</td>
                                        <td>@order.OrderDate.ToString("MMM d, yyyy")</td>
                                        <td>$@(order.OrderItems?.Sum(i => i.Quantity * i.Price).ToString("N2") ?? "0.00")</td>
                                        <td><span class="status-@order.Status.ToLower()">@order.Status</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>

            <div class="panel">
                <div class="panel-header">
                    <h2>Low Stock Items</h2>
                    <button class="view-all-btn" @onclick="NavigateToInventoryPage">View All</button>
                </div>
                <div class="panel-content">
                    @if (isLoading)
                    {
                        <div class="loading-indicator">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <span class="ml-2">Loading inventory...</span>
                        </div>
                    }
                    else if (inventoryItems.Count == 0)
                    {
                        <div class="empty-state">
                            <p>No inventory items found.</p>
                        </div>
                    }
                    else
                    {
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Product</th>
                                    <th>Current Stock</th>
                                    <th>Price</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in inventoryItems.OrderBy(i => i.Name).Take(5))
                                {
                                    <tr>
                                        <td>#@item.InventoryItemId</td>
                                        <td>@item.Name</td>
                                        <td>@item.TotalStock</td>
                                        <td>$@item.Price.ToString("N2")</td>
                                        <td><span class="status-in-stock">In Stock</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
}

